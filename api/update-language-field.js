const mongoose = require('mongoose');
require('dotenv').config();

async function updateLanguageField() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await mongoose.connect(process.env.MONGOURL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é movies
    const db = mongoose.connection.db;
    const moviesCollection = db.collection('movies');

    // –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –ø–æ–ª–µ language –Ω–∞ film_language
    const result = await moviesCollection.updateMany(
      { language: { $exists: true } },
      { $rename: { language: "film_language" } }
    );

    console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ ${result.modifiedCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`);
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${result.matchedCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –ø–æ–ª–µ–º language`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const sampleDoc = await moviesCollection.findOne({ film_language: { $exists: true } });
    if (sampleDoc) {
      console.log('üìã –ü—Ä–∏–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É:', {
        title: sampleDoc.title,
        film_language: sampleDoc.film_language
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è film_language
    await moviesCollection.createIndex({ film_language: 1 });
    console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è film_language');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
    process.exit(0);
  }
}

updateLanguageField();